1.is a 관계와 has a 관계에 대하여 설명하시오.
 
 is a 는 상속관계이다. 노트북은 컴퓨터이다.
 
 has a 는 포함관계이다. 컴퓨터는 cpu를 가지고 있다.
 
 
 
2.다형성이란 무엇인가?

많은 형을 가질 수 있다.

객체 지향 프로그램(oop)의 핵심 개념 중 하나이다.

부모클래스는 자식 클래스(without 형 변환) 인 것이 핵심이다.

A a = new A();  //폴리 멀티즘(다형성) 
		B a = new B();	//부모 = 자식(without 형변환) 그 역은 안된다. 모든 자바의 70%는 폴리멀티즘이 적용됨
					    //A ab = new B(); 
						// 부모타입이 메모리에 올라와 있기 때문에 자식 타입은 허용 가능
		
		A ab = new B(); // 타입이 부모 타입으로 미리 메모리에 잡혀 있기 떄문에 자식 타입으로는 올 수 없다. 

		B ab = new A();



3.아래가 되지 않는 이유에 대하여 메모리 그림으로
설명하시오.MobilePhone(부모) SmartPhone(자식)
SmartPhone s = new MobilePhone();

부모 클래스인 모바일폰 타입이 먼저 메모리에 올라가기 때문에 스마트폰 타입 참조 할 수 없다. 당연히 불가능하다.


4.메소드 오버라이딩 이란?

다형성의 핵심중 하나이다.부모 자식의 함수의 리턴 타입, 함수이름, 파라미터가 모두 똑같고 구현 내용만 달리하는 것이다.

오버라이딩은 상속관계가 동반되어야한다
함수 오버라이딩이란?
상속관계에서 함수의 리턴타입 함수이름 파라미터 다 똑같이 정의하고
구현 내용만 달리한다.

오버라이딩은 자식꺼 자식꺼로 구현 내용을 덮어 쓴다. 

인스턴스 변수는 오버라이딩 되지 않는다!

부모것을 호출해도 자식것이 호출 되는 것이다.


5.갬블링 게임을 만들어보자. 두 사람이 게임을 진행한다. 이들의 이름을 키보드로 입력 받으며 각 사람은 Person 클래스로 작성하라.
그러므로 프로그램에는 2개의 Person 객체가 생성되어야 한다. 두 사람은 번갈아 가면서 게임을 진행하는데 각 사람이 자기 차례에서 
<Enter> 키를 입력하면, 3개의 난수가 발생되고 이 숫자가 모두 같으면 승자가 되고 게임이 끝난다. 난수의 범위를 너무 크게 잡으면
3개의 숫자가 일치하게 나올 가능성이 적기 때문에 숫자의 범위는 1~3까지로 한다.

1번째 선수 이름>>수희
2번째 선수 이름>>연수
[수희]:
	3  1  1  아쉽군요!
[연수]:
	3  1  3  아쉽군요!
[수희]:
	2  2  1  아쉽군요!
[연수]:
	1  1  2  아쉽군요!
[수희]:
	3  3  3  수희님이 이겼습니다!

6.문제 10의 갬블링 게임을 n명이 하도록 수정하라. 실행 예시와 같이 게임에 참여하는 선수의 수를 입력받고 각 선수의 이름을 입력받도록 수정하라.

겜블링 게임에 참여할 선수 숫자>>3
1번째 선수 이름>>황
2번째 선수 이름>>이
3번째 선수 이름>>김
[황]:
	2  3  3  아쉽군요!
[이]:
	1  2  2  아쉽군요!
[김]:
	2  2  3  아쉽군요!
[황]:
	3  2  2  아쉽군요!
[이]:
	1  1  3  아쉽군요!
[김]:
	2  2  1  아쉽군요!
[황]:
	2  2  2  황님이 이겼습니다!

7.다음을 만족하는 클래스 Employee를 작성하시오
(8번문제부터는 이것과 관련된 문제입니다).

- 클래스 Employee(직원)은 클래스 Regular(정규직)와 Temporary(비정규직)의 상위 클래스

- 필드: 이름, 나이, 주소, 부서, 월급 정보를 필드로 선언

- 생성자 : 이름, 나이, 주소, 부서를 지정하는 생성자 정의

-메소드 printInfo() : 인자는 없고 자신의 필드 이름, 나이, 주소, 부서를 출력



=================================================================메인==============================================================================
	public class EmployeeMain {

	public static void main(String[] args) {
		Employee emplo = new Employee("홍길동", 28, "목포", "소프트웨어");
		emplo.printInfo();
		
		System.out.println();
		Employee employ = new Regular("홍길동", 28, "목포", "소프트웨어" , 300);
		employ.printInfo();

	}

}
================================================================클래스=============================================================================
public class Employee {

	private int  age;
	private String name , address , position;
	
	protected int salary;
	

	public Employee(String name , int age , String address , String position) {

		this.name = name ;
		this.address = address;
		this.age = age;
		this.position = position;

	}

	public void printInfo() {
		
		System.out.println("나이 : " + age + "/ 이름 : " + name + "/ 주소 : " + address + "/ 부서 : " + position);
 }
	
	public void setSalary(int salary) {
		this.salary = salary;
	}
}





8. 다음을 만족하는 클래스 Regular를 작성하시오.

- 클래스 Regular는 위에서 구현된 클래스 Employee의 하위 클래스

- 생성자 : 이름, 나이, 주소, 부서를 지정하는 상위 생성자 호출

- Setter : 월급 정보 필드를 지정

- 메소드 printInfo() : 인자는 없고 "정규직"이라는 정보와 월급을 출력

=================================================================클래스================================================================================

class Regular extends Employee {

	 Regular(String name, int age, String address, String position, int salary) {
		super(name, age, address, position);
		setSalary(salary);
	}
	 
	 public void setSalary(int salary) {
		 
		 this.salary = salary;
		 
	 }

	public void printInfo() {
		super.printInfo();
		System.out.println("정규직" + super.salary);

	}

}



장바구니 프로그래밍 해보기




======================================================================메인========================================================================================

public class OverridingExer {

		
		public static void main(String[] args) {
			
		
			Buyer b = new Buyer();
			b.buy(new Tv());
			b.buy(new Computer());
			b.buy(new Tv());
			b.buy(new Audio());
			b.buy(new Computer());
			b.buy(new Computer());
			b.buy(new Computer());
			b.buy(new Computer());
			b.summary();
		

	}
}


class Product{ //부모 클래스
	int price ; 
	Product(int price){
		this.price = price ;
	}
}

class Tv extends Product{
	Tv(){
		super(100);
	}
	public String toString() {
		return "Tv";
	}
}

class Computer extends Product{
	Computer(){
		super(200);
	}
	public String toString() {
		return "Computer";
	}
}

class Audio extends Product{
	Audio(){
		super(300);
	}
	public String toString() {
		return "Audior";
	}
}


======================================================================클래스============================================================================================

public class Buyer {

	int money = 10000;

	Product[] cart = new Product[3];
	int i = 0;// 배열에서 하나하나씩 증가시키는 역할

	void buy(Product p) {
		if (money < p.price) { // 가진 돈 부족
			System.out.println("잔액비 부족하여" + p + "를 할 수 없습니다");
			return;
		}

		// 2.가진 돈 충분
		money = money - p.price;

		// 장바구니에 물건을 담는다.

		add(p);
	}

	void add(Product p) { // 장바구니 담는 함수
		// 1. i의 값이 장바구니의 크기보다 같거나 크면
		if (i >= cart.length) {
			// 기존의 장바구니보다 2배 더 큰 배열 생성
			Product[] temp = new Product[cart.length * 2];
			// 기존에 있는 내용을 복사
			System.arraycopy(cart, 0, temp, 0, cart.length);

			cart = temp;
		}

		cart[i++] = p; // cart[i] i++
	}

	void summary() {
		String itemList = "";
		int sum = 0;

		for (int i = 0; i < cart.length; i++) {
			if (cart[i] == null)
				break;

			itemList = itemList + cart[i] + ",";
			sum = sum + cart[i].price;
		}
		System.out.println("구입한 물건 : " + itemList);
		System.out.println("사용한 금액 : " + sum);
		System.out.println("남은 금액 : " + money);
	}

}



다형성으로 친구의 이름과 번호와 주소를 표현하기 

============================================================메인========================================================================================
public class FriendMain {
	
	public static void main(String [] args) {
		Friend[] frns = new Friend[10]; //프렌드 타입으로 다 묶어버렸다. 
		int cnt = 0 ;
		
		frns[cnt++] = new UnivFriend("lee" , "computer" , "010-333-555" );
		frns[cnt++] = new UnivFriend("seo" , "electronics" , "010-2323-2255");
		frns[cnt++] = new UnivFriend("yoon" , "r&d 1" , "010-1234-5355");
		frns[cnt++] = new UnivFriend("park" , "r&d 2" , "010-9383-5657");
		frns[cnt++] = new UnivFriend("cha" , "software" , "010-2003-6745");
		
		for(int i = 0 ; i < cnt ; i++) {
			frns[i].showInfo(); //오버라이딩 메소드 출력
			System.out.println();

 }
 }
}

=======================================================================클래스=================================================================================

class Friend { // 다형성 적용

	protected String name;

	protected String phone;

	public Friend(String na, String ph) {

		name = na;
		phone = ph;

	}

	public void showInfo() {
		System.out.println("이름 : " + name);
		System.out.println("전화 : " + phone);
	}

}

	class ComFriend extends Friend {
	private String department;

	public ComFriend(String na, String de, String ph) {

		super(na, ph);
		department = de;
	}

	public void showInfo() {
		super.showInfo();
		System.out.println("부서 : " + department);
	}

}
 	
class UnivFriend extends Friend {
	private String major;

	public UnivFriend(String na, String ma, String ph) {
		super(na, ph);
		major = ma;
	} 

	public void showInfo() {
		
		super.showInfo();
		System.out.println("전공 : " + major);
	}

}


	

