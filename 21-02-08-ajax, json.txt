1.restful에 대하여 설명하시오. 



json -> ajax -> RESTful ->uri를 설계하는 것이다.

\REST(Representational State Transfer)는 월드 와이드 웹과 같은 분산 

하이퍼미디어 시스템을 위한 소프트웨어 아키텍처의 한 형식이다.

이 용어는 로이 필딩(Roy Fielding)의 2000년 박사학위 논문에서 소개되었다.

필딩은 HTTP의 주요 저자 중 한 사람이다.


REST Api 설계 


get(조회) /board 

get /board{bid}

post(생성) /board


put(수정) /board/{bid}

delete(삭제) /board/{bid}


form태그에는 get과 post 밖에 없다.

delete put 을 쓸때는 ajax(자바스크립트)처리를 해줘야한다.



ajax 를 써 delete를 구현하세요


========================RestBoardController.java======================

package edu.bit.ex.controller;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import edu.bit.ex.service.BoardService;
import edu.bit.ex.vo.BoardVO;
import lombok.AllArgsConstructor;
import lombok.extern.log4j.Log4j;

//REST : Representational State Transfer
//하나의 URI가 하나의 고유한 리소스를 대표하도록 설계된 개념

//http://localhost/spring02/list?bno=1 ==> url+파라미터
//http://localhost/spring02/list/1 ==> url
//RestController은 스프링 4.0부터 지원
//@Controller, @RestController 차이점은 메서드가 종료되면 화면전환의 유무

@Log4j
@AllArgsConstructor
@RestController
@RequestMapping("/restful/*")
public class RestBoardController {

   private BoardService boardService;

    // 1. list(처음 진입 화면이므로 화면이 깜박여도 상관없으므로 @Controller방식으로 접근 - veiw(화면)를 리턴
   @GetMapping("/board")
   public ModelAndView list(ModelAndView mav) {
      mav.setViewName("rest_list");
      mav.addObject("list", boardService.getList());

      return mav;
   }

   @GetMapping("/board/{bId}")
   public String rest_content_view(BoardVO boardVO,Model model) {

      log.info("rest_content_view");
      model.addAttribute("content_view", boardService.getBoard(boardVO.getbId()));
      return "content_view";
   }
   

//딜리트 함수!!

 @DeleteMapping("/board/{bId}")
   public ResponseEntity<String> rest_delete(BoardVO boardVO,Model model) {
      ResponseEntity<String> entity = null;
      log.info("rest_delete..");
      try {
         boardService.remove(boardVO.getbId());
            // 삭제가 성공하면 성공 상태메시지 저장
            entity = new ResponseEntity<String>("SUCCESS", HttpStatus.OK);
        } catch (Exception e) {
            e.printStackTrace();
            // 댓글 삭제가 실패하면 실패 상태메시지 저장
            entity = new ResponseEntity<String>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
        // 삭제 처리 HTTP 상태 메시지 리턴
        return entity;

   }   

=========================BoardService.java=============================

public void remove(int getbId);


=========================BoardServiceChild.java=============================
	@Override
	public void remove(int bId) {
		log.info("remove..........");	
		mapper.remove(bId);
	}


=========================BoardMapper.java=============================

public BoardVO remove(int bId);



=========================BoardMapper.xml=============================

 <select id="remove">
   <![CDATA[
    delete from mvc_board where bId = #{bId}
   ]]>
   </select>



========================rest_list.jsp===================================

<%@ page language="java" contentType="text/html; charset=UTF-8"
   pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>REST Delete</title>
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script   src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script type="text/javascript">

 
    $(document).ready(function() {
      $(".a-del").click(function(event) {
         event.preventDefault();
         //alert("a-del click");
         console.log("a-del click");

         var tr = $(this).parent().parent();

         $.ajax({
            type : 'DELETE', //method
            url : $(this).attr("href"),
            cache : false,
            success : function(result) {
            //   alert("result: " + result)
               console.log("result: " + result);
               if (result == "SUCCESS") {
                  $(tr).remove();
               //   alert("삭제되었습니다.");
               }
            },
            errer : function(e) {
               console.log(e);
            }
         }); //end of ajax
      }); //end of $().click

   });
</script>

</head>
<body>
   
   <table width="500" cellpadding="0" cellspacing="0" border="1">
      <tr>
         <td>번호</td>
         <td>이름</td>
         <td>제목</td>
         <td>날짜</td>
         <td>히트</td>
         <td>삭제</td>
      </tr>
      <c:forEach items="${list}" var="vo">
         <tr>
            <td>${vo.bId}</td>
            <td>${vo.bName}</td>
            <td><c:forEach begin="1" end="${vo.bIndent}">-</c:forEach> <a
               id="a-content"
               href="${pageContext.request.contextPath}/restful/board/${vo.bId}">${vo.bTitle}</a></td>
            <td>${vo.bDate}</td>
            <td>${vo.bHit}</td>
            <td><a class="a-del" href="${pageContext.request.contextPath}/restful/board/${vo.bId}">삭제</a></td>
         </tr>
      </c:forEach>
      <tr>
         <td colspan="5"><a href="write_view">글작성</a></td>
      </tr>
   </table>
</body>
</html>




