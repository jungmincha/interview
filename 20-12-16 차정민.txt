1.throws 에 대하여 설명하시오.


try와 catch에서 던지고 던져진 오류 값을 받아내어 예외처리를 해주는 것이다. 
throws 는 함수 옆에다 써준다. throws절 선언을 통해 예외의 처리를 해준다.
함수명은 IOException이다. 자기 함수를 호출 한 곳으로 던진다.


2.아래가 컴파일 에러가 나는 이유에 대하여 설명하시오.
try {
        	int num = 6 / 0;
        	
        	
		} catch (Exception e) {
			e.printStackTrace();
		} catch (InputMismatchException e) {
			//빨간 줄이 그어진다.
			e.printStackTrace();
		}

Exception은 예외 클래스의 조상클래스이며 가장 위에 Exception가 올라가 있으면 폴리몰피즘이 적용된다.

아래에 있는 예외 클래스의 값을 먹어버리기 때문에 컴파일에러가 생긴다.




3.try with resource 에 대하여 설명하시오.

1.7버젼에 새로 생긴 문법

try catch finally 를 쉽게 해주는 것
====================================================================
try(FileInputStream fis = new FileInPutStream("")){
.
.
} catch (Exception e){
	e.printStackTrace
}
===================================================================
finally 생략 가능



7.equals 함수에 대하여 설명하시오.

Object 라는 최고의 조상 클래스의 11개의 함수 중 한가지이다. 
비교 할 때 쓰인다. 

주소값 비교

return(this == obj)

보통 오버라이드 해서 많이 사용한다.


5. 과일, 사과, 배, 포도를 표현한 클래스를 만들고 이들 간의 관계를 고려하여 하나의 클래스를 추상 클래스로 만들어 메소드 print()를 구현하고 

다음과 같은 소스와 결과가 나오도록 클래스를 작성하시오.

- 소스

Fruit fAry[] = {new Grape(), new Apple(), new Pear());

for(Fruit f : fAry)

f.print();

-  결과

나는 포도이다.
나는 사과이다.
나는 배이다.


abstract class Fruit {

	abstract void print();

}

class Grape extends Fruit {

	@Override
	void print() {

		System.out.println("나는 포도이다.");
	}
}

class Apple extends Fruit {

	@Override
	void print() {

		System.out.println("나는 사과이다.");
	}
}

class Pear extends Fruit {

	@Override
	void print() {

		System.out.println("나는 배 이다");
	}
}

class MainFruits {

	public static void main(String[] args) {

		Fruit fAry[] = { new Grape(), new Apple(), new Pear() };

		for (Fruit f : fAry)

			f.print();

	}

}



















6. 다음 조건을 만족하도록 클래스 Person과 Student를 작성하시오.

- 클래스 Person
* 필드 : 이름, 나이, 주소 선언

- 클래스 Student
* 필드 : 학교명, 학과, 학번, 8개 평균평점을 저장할 배열로 선언
* 생성자 : 학교명, 학과, 학번 지정
* 메소드 average() : 8개 학기 평균평점의 평균을 반환

- 클레스 Person과 Student 프로그램 테스트 프로그램의 결과 : 8개 학기의 평균평점은 표준입력으로 받도록한다.
이름 : 김다정
나이 : 20

주소 : 서울시 관악구
학교 : 동양서울대학교
학과 : 전산정보학과
학번 : 20132222

----------------------------------------

8학기 학점을 순서대로 입력하세요

1학기 학점  → 3.37
2학기 학점  → 3.89
3학기 학점  → 4.35
4학기 학점  → 3.76
5학기 학점  → 3.89
6학기 학점  → 4.26
7학기 학점  → 4.89
8학기 학점  → 3.89 

----------------------------------------



public class Person {

	protected int age = 0;
	protected String name = "";
	protected String home = "";

	Person(int age, String name, String home) {

		this.age = age;
		this.name = name;
		this.home = home;
	}

	public void print() {

	}

}

class Student extends Person {

	String school = "";
	String major = "";
	int majornum = 0;
	int[] score = new int[4];

	Student(int age, String name, String home , String school , String major , int majornum ) {
			
		super(age, name, home);
		this.school = school;
		this.major = major;
		this.majornum = majornum;

	}
		
	public void print() {
		System.out.println("이름 : " + super.name);
		System.out.println("주소 : " + super.home);
		System.out.println("나이 : " + super.age);
		System.out.println("학교 : " + school);
		System.out.println("학과 : " + major);
		System.out.println("학번 : " + majornum);

		
		Scanner sc = new Scanner(System.in);
		
		System.out.println("8학기 학점을 순서대로 입력하세요");
		
		
		int num = sc.nextInt();
		
		for(int i = 0 ; i < score.length ; i ++) {
		System.out.print((i+1) + "학기 학점 : ");
			score[i] = sc.nextInt();
	
		}
		sc.close();
	
	}	

	public int average() {	
		int sum = 0 ;
		int avg = 0 ;
		
		for(int i = 0 ; i < score.length ; i++) {
			sum = sum + score[i];
		}
			avg = sum / score.length;
		
		return avg;
		
		
		
	}
	
}	

ublic class PersonMain {
	
	public static void main(String [] args) {
		
		Student myPer = new Student(20 , "김다정" , "관약" , "동양서울대" , "전산정보" , 20132222);
		myPer.print();
		myPer.average();
		
	
		
		
		
		
	}
}













8학기 총 평균 평점은 4.0375점입니다.

7.다음은 도형의 구성을 묘사하는 인터페이스이다.

interface Shape {
   final double PI = 3.14; // 상수
   void draw(); // 도형을 그리는 추상 메소드
   double getArea(); // 도형의 면적을 리턴하는 추상 메소드
   default public void redraw() { // 디폴트 메소드
      System.out.print("--- 다시 그립니다.");
      draw();
   }
}
다음 main() 메소드와 실행 결과를 참고하여, 인터페이스 Shape을 구현한 클래스 Circle를 작성하고 전체 프로그램을 완성하라.

public static void main(String[] args) {
   Shape donut = new Circle(10); // 반지름이 10인 원 객체
   donut.redraw();
   System.out.println("면적은 "+ donut.getArea());
 
   
   


class Circle implements Shape {

	double r = 0;

	Circle(double r) {
		this.r = r;
	}

	public void draw() {

		System.out.println("반지름이" + r + "인 원입니다.");
	}

	@Override
	public double getArea() {

		return r * r * PI;
	}
}




8.
다음 main() 메소드와 실행 결과를 참고하여, 문제 7의 Shape 인터페이스를 구현한 클래스 Oval, Rect를 추가 작성하고 전체 프로그램을 완성하라.

public static void main(String[] args) {
   Shape[] list = new Shape[3]; // Shape을 상속받은 클래스 객체의 레퍼런스 배열
   list[0] = new Circle(10); // 반지름이 10인 원 객체
   list[1] = new Oval(20, 30); // 20x30 사각형에 내접하는 타원
   list[2] = new Rect(10, 40); // 10x40 크기의 사각형
   for(int i=0; i<list.length; i++) list[i].redraw();
   for(int i=0; i<list.length; i++) System.out.println("면적은 "+ list[i].getArea());
}
--- 다시 그립니다.반지름이 10인 원입니다.
--- 다시 그립니다.20x30에 내접하는 타원입니다.
--- 다시 그립니다.10x40크기의 사각형 입니다.
면적은 314.0
면적은 1884.0000000000002
면적은 400.0




class Oval implements Shape {

	int x = 0;
	int y = 0;

	Oval(int x, int y) {

		this.x = x;
		this.y = y;
	}

	@Override
	public void draw() {
		System.out.println("반지름이" + x + "*" + y + "에 내접하는 타원입니다.");

	}

	@Override
	public double getArea() {

		return x * y * Math.PI;
	}

}

class Rect implements Shape {

	int x = 0;
	int y = 0;

	Rect(int x, int y) {
		this.x = x;
		this.y = y;
	}

	@Override
	public void draw() {
		System.out.println(x + "*" + y + "크기의 사각형입니다.");

	}

	@Override
	public double getArea() {

		return x * y;
	}

}



