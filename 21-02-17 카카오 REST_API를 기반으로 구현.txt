1.v4 템플릿을 적용하여, 카카오 로그인을 구현하시오.


기존에 있는 restful 로그인 페이지를 제외하고 총 3개의 새로운 페이지가 작성이되었다.

v4템플릿을 적용하여서 카카오 로그인에 접근하는 페이지 login2.jsp페이지를 만들었다.

그리고 login2.jsp 페이지에서 카카오 이미지를 누르면 KakaoController를 타게 경로설정하였다.

KakaoController.java를 작성하고 REST_API를 통해 인증!과 권한! 을 구현했다.

그리고 인증과 권한을 얻으며 엑세스 토큰을 얻고 아이디와 비밀번호와 카카오 계정에 로그인이 되고 

kakaoboard.jsp로 return 해주어 게시판에 들어갈 수 있는 권한을 얻게 구현하였다. 

그리고 controller를 제대로 작동시켜주기 위해 pom.xml에 의존성 주입을 한다.

<!-- https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient -->



-<dependency>

<groupId>org.apache.httpcomponents</groupId>

<artifactId>httpclient</artifactId>

<version>4.5.13</version>

</dependency>

<!-- https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple -->



-<dependency>

<groupId>com.googlecode.json-simple</groupId>

<artifactId>json-simple</artifactId>

<version>1.1.1</version>

</dependency>





=======================================KakaoController.java=======================================================


package edu.bit.ex.controller;

import java.util.HashMap;
import java.util.Map;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.client.RestTemplate;

//import edu.bit.ex.util.HttpClientManager;

/**
 * Handles requests for the application home page.
 */
@Controller
public class Kakaocontroller {
	//CLIENT_ID(REST API) 와 REDIRECT_URL는 카카오 로그인의 가장 핵심적인 요소이다.
	//static final로 선언해 가장 먼저 메모리에 올려준다.
	
	
	private static final String CLIENT_ID = "9036de365936cf5dac4bfac128655e2a"; //REST API 키를 입력해준다.
	
	//REST API는 카카오 로그인 동의 화면을 호출하고, 사용자 동의를 거쳐 인가 코드 발급을 요청하는 API이다.
	//세션에 따라 로그인 동선이 달라진다. 세션이 없다면 계정정보를 입력하는 등 인증과정을 거쳐 동의 화면을 보게되고 세션이 있다면 바로 동의화면을 보게 된다.
	//'동의하고 계속하기' 버튼을 누르면, 카카오 인증 서버는 해당 사용자에 대한 인가 코드를 발급해 서비스의 redirect_uri에 전달한다.
	
	private static final String REDIRECT_URL = "http://localhost:8282/ex/login3/callback"; 
	
	// REDIRECT_URL은 앱이 성공적으로 인증 되고 인증 코드 또는 액세스 토큰이 부여 된 후, 권한 부여 서버에서 사용자를 전송 하는 위치이다.

	@GetMapping("/login3")//login2.jsp에 있는 카카오 이미지를 누르면 이 곳으로 타고 들어온다.
	public String login() {
		String requestUrl = String.format(//String.format 메서드이다. 지정된 형식에 따라 개체의 값을 문자열로 변환하여 다른 문자열에 삽입 한다.
				"https://kauth.kakao.com/oauth/authorize?client_id=%s&redirect_uri=%s&response_type=code", CLIENT_ID,
				REDIRECT_URL);//뒤에 있는 CLIENT_ID,REDIRECT_URL의 값을 앞에 있는 %s에 담아 준다. 
							//ouath/authorize는 id와 pw 없이 AcessToken 으로 로그인 권한을 주는 것이다.
		
		//즉 정리를 해보자! AcessToken을 얻기 위해  CLIENT_ID,REDIRECT_URL의 값을  Authorization Server에 보내고 
		//사용자가 동의하면 내 서비스에 code를 response 해준다. 
		//code는 권한, 인가의 개념으로 정리했다.
			
		return "redirect:" + requestUrl;
		//위에서 얻은 정보들과 함께 redirect 한다.
	}

	@GetMapping(value = "/login3/callback") // redirect되어서 다시 주소를 탔다.
	public String redirect(@RequestParam(name = "code", required = false) String code, Model model) {
		//위에서 받은 code를 @RequestParam 시켜준다.
		
		//HttpHeader 오브젝트를  생성 해준다. http의 header를 만들어주는 클래스 , pom.xml에서 의존성 주입해야 한다.
		HttpHeaders headers = new HttpHeaders(); 
		headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);//RestTemplate 으로 POST 전송시에 사용한다.

		MultiValueMap<String, Object> params = new LinkedMultiValueMap<String, Object>();
		
		//MultiValueMap 타입은 JSON형식으로 만들어주기에 적합한 타입이다.
		
		params.set("grant_type", "authorization_code");
		//grant_type : 
		//OAuth 2.0 프레임워크의 핵심은 다양한 클라이언트 환경에 적합한 인증 및 권한의 위임 방법(grant_type)을 제공한다.
		//그 결과로 클라이언트에게 access_token을 발급하는 것이다.
		params.set("client_id", CLIENT_ID);
		params.set("client_secret", "vjSPH7c6fDoB5UztQjgdHg8PLBFmfVDw");
		params.set("code", code);
		params.set("redirect_uri", REDIRECT_URL);
		
		///HttpHeader와 HttpBody를 하나의 오브젝트에 담는다.
		HttpEntity<MultiValueMap<String, Object>> restRequest = new HttpEntity<MultiValueMap<String, Object>>(params, headers);
		RestTemplate restTemplate = new RestTemplate(); //HttpEntity : Http의 Header와 Body부분을 하나로 저장해주는 클래스

        String result = restTemplate.postForObject("https://kauth.kakao.com/oauth/token", restRequest, String.class);
        
        JSONParser parser = new JSONParser();
        //파싱이란?
        /*언어학에서 구문 분석 또는 '파싱'은 문장을 그것을 이루고 있는 구성 성분으로 분해하고
         *  그들 사이의 위계 관계를 분석하여 문장의 구조를 결정하는 것을 말한다.
         *  프로그래밍에서 파싱은 일련의 문자열을 의미있는 토큰으로 분해하고 
         *  이들로 이루어진 파스 트리를 만드는 과정을 말한다(ex.구문분석을 통해 위계질서를 정하고java에서 json을 사용하는 것?)
         * 
         */
        
        //JSONParser , JSONObject : java에서 json을 파싱하는 것 pom.xml에서 주입한다
        try {
            JSONObject object = (JSONObject) parser.parse(result);
            if (object.containsKey("access_token")) { // access_token : 사용자를 인증하고 카카오 API 호출 권한을 부여한다.
                String accessToken = (String) object.get("access_token");
                Map<String, Object> map = getProfile(accessToken, model);
                
                model.addAttribute("id", map.get("id"));
                model.addAttribute("nickname", map.get("nickname"));
                model.addAttribute("email", map.get("email"));
            }
        } catch (Exception e) {
            System.out.println("json parsing error");
        }

		return "kakaoboard";
	}
	
	
    private Map<String, Object> getProfile(String accessToken, Model model) {
        Map<String, Object> map = new HashMap<String, Object>();

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
        headers.set("Authorization", "Bearer " + accessToken);

        HttpEntity<String> entity = new HttpEntity<String>(headers);
        RestTemplate rest = new RestTemplate();
        //RestTemplate :
        //spring 3.0 부터 지원한다. 스프링에서 제공하는 http 통신에 유용하게 쓸 수 있는 템플릿이다.
        //HTTP 서버와의 통신을 단순화하고 RESTful 원칙을 지킨다. 
        //  기계적이고 반복적인 코드들을 깔끔하게 정리해준다.
        //RESTful형식에 맞춘다. json, xml 를 쉽게 응답받는다.



        ResponseEntity<String> result = rest.exchange("https://kapi.kakao.com/v2/user/me", HttpMethod.GET, entity, String.class);
        //ResponseEntity는 HttpEntity를 상속받음으로써 HttpHeader와 body를 가질 수 있다. 
        // ResponseEntity는 Client의 요청에 대한 응답을 한번 더 감싸는 역할을 한다.
        //이러한 응답을 받은 Client 개발자는 요청 후 응답의 상태코드에 따라 다른 화면을 노출시킬 수도있다.
        //Header값에 따라 다른 동작을 할 수도 있다.
        
        if (result.getStatusCode() == HttpStatus.OK) {
            result.getBody();
            JSONParser parser = new JSONParser();
            try {
                JSONObject object = (JSONObject) parser.parse(result.getBody());
                if (object.containsKey("id")) {
                    map.put("id", object.get("id"));
                }
                if (object.containsKey("kakao_account")) {
                    JSONObject accountObj = (JSONObject) object.get("kakao_account");
                    if (accountObj.containsKey("profile")) {
                        JSONObject profileObj = (JSONObject) accountObj.get("profile");
                        map.put("nickname", profileObj.get("nickname"));
                    }
                    if (accountObj.containsKey("email")) {
                        map.put("email", accountObj.get("email"));
                    }
                }
            } catch (ParseException e) {
                System.out.println("json parsing error");
            }
        }
        model.addAttribute("map", map);
        return map;
    }
}
/*
map은 kakaoboard에서 forEach로 사용할 수 있다.
<c:forEach items="${map }" var ="kakao">
	
*/



===============================================login2.jsp===========================================================================================

<!--사진들을 전부 resources아래로 절대경로 잡아주었다.${pageContext.request.contextPath}/resources/
주어진 소스코드에 있는 경로를 활용할 줄 몰라서 새로 이미지와 경로를 심어주었다.
<a href ="${pageContext.request.contextPath}/login3">
					<img src = "${pageContext.request.contextPath}/resources/images/kakao_circle.png" width = "50">
					</a>
          
          이미지를 누르면 ${pageContext.request.contextPath}/login3 여기로 탄다. KakaoController로 가는것이다. 

-->

<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>

<!DOCTYPE html>
<html lang="en">
<head>
	<title>Login V4</title>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
<!--===============================================================================================-->	
	<link rel="icon" type="image/png" href="${pageContext.request.contextPath}/resources/images/icons/favicon.ico"/>
<!--===============================================================================================-->
	<link rel="stylesheet" type="text/css" href="${pageContext.request.contextPath}/resources/vendor/bootstrap/css/bootstrap.min.css">
<!--===============================================================================================-->
	<link rel="stylesheet" type="text/css" href="${pageContext.request.contextPath}/resources/fonts/font-awesome-4.7.0/css/font-awesome.min.css">
<!--===============================================================================================-->
	<link rel="stylesheet" type="text/css" href="${pageContext.request.contextPath}/resources/fonts/iconic/css/material-design-iconic-font.min.css">
<!--===============================================================================================-->
	<link rel="stylesheet" type="text/css" href="${pageContext.request.contextPath}/resources/vendor/animate/animate.css">
<!--===============================================================================================-->	
	<link rel="stylesheet" type="text/css" href="${pageContext.request.contextPath}/resources/vendor/css-hamburgers/hamburgers.min.css">
<!--===============================================================================================-->
	<link rel="stylesheet" type="text/css" href="${pageContext.request.contextPath}/resources/vendor/animsition/css/animsition.min.css">
<!--===============================================================================================-->
	<link rel="stylesheet" type="text/css" href="${pageContext.request.contextPath}/resources/vendor/select2/select2.min.css">
<!--===============================================================================================-->	
	<link rel="stylesheet" type="text/css" href="${pageContext.request.contextPath}/resources/vendor/daterangepicker/daterangepicker.css">
<!--===============================================================================================-->
	<link rel="stylesheet" type="text/css" href="${pageContext.request.contextPath}/resources/css/util.css">
	<link rel="stylesheet" type="text/css" href="${pageContext.request.contextPath}/resources/css/main.css">
<!--===============================================================================================-->
</head>
<body>
<%
   String path = request.getContextPath();
%>
<c:if test="${user == null}">
<form class="form-signin"role="form" method="post" autocomplete="off" action="<%=path%>/login2">
	
	<div class="limiter">
		<div class="container-login100" style="background-image: url('${pageContext.request.contextPath}/resources/images/bg-01.jpg');">
			<div class="wrap-login100 p-l-55 p-r-55 p-t-65 p-b-54">
				<form class="login100-form validate-form">
					<span class="login100-form-title p-b-49">
						Login
					</span>

					<div class="wrap-input100 validate-input m-b-23" data-validate = "Username is reauired">
						<span class="label-input100">Username</span>
						<input class="input100" id="userId" type="text" name="id" placeholder="Type your username">
						<span class="focus-input100" data-symbol="&#xf206;"></span>
					</div>

					<div class="wrap-input100 validate-input" data-validate="Password is required">
						<span class="label-input100">Password</span>
						<input class="input100" id="userPass" type="password" name="pw" placeholder="Type your password">
						<span class="focus-input100" data-symbol="&#xf190;"></span>
					</div>
					
					<div class="text-right p-t-8 p-b-31">
						<a href="#">
							Forgot password?
						</a>
					</div>
					
					<div class="container-login100-form-btn">
						<div class="wrap-login100-form-btn">
							<div class="login100-form-bgbtn"></div>
							<button type = "submit" class="login100-form-btn">
								Login
							</button>
						</div>
					</div>

					<div class="txt1 text-center p-t-54 p-b-20">
						<span>
							Or Sign Up Using
						</span>
					</div>
					

					<div class="flex-c-m">
					<a href ="${pageContext.request.contextPath}/login3">
					<img src = "${pageContext.request.contextPath}/resources/images/kakao_circle.png" width = "50">
					</a>
					
					
					
					
						<a href="#" class="login100-social-item bg1">
							<i class="fa fa-facebook"></i>
						</a>

						<a href="#" class="login100-social-item bg2">
							<i class="fa fa-twitter"></i>
						</a>

						<a href="#" class="login100-social-item bg3">
							<i class="fa fa-google"></i>
						</a>
					</div>

					<div class="flex-col-c p-t-155">
						<span class="txt1 p-b-17">
							Or Sign Up Using
						</span>

						<a href="#" class="txt2">
							Sign Up
						</a>
					</div>
				</form>
			</div>
		</div>
	</div>
	

	<div id="dropDownSelect1"></div>
	
<!--===============================================================================================-->
	<script src="${pageContext.request.contextPath}/resources/vendor/jquery/jquery-3.2.1.min.js"></script>
<!--===============================================================================================-->
	<script src="${pageContext.request.contextPath}/resources/vendor/animsition/js/animsition.min.js"></script>
<!--===============================================================================================-->
	<script src="${pageContext.request.contextPath}/resources/vendor/bootstrap/js/popper.js"></script>
	<script src="${pageContext.request.contextPath}/resources/vendor/bootstrap/js/bootstrap.min.js"></script>
<!--===============================================================================================-->
	<script src="${pageContext.request.contextPath}/resources/vendor/select2/select2.min.js"></script>
<!--===============================================================================================-->
	<script src="${pageContext.request.contextPath}/resources/vendor/daterangepicker/moment.min.js"></script>
	<script src="${pageContext.request.contextPath}/resources/vendor/daterangepicker/daterangepicker.js"></script>
<!--===============================================================================================-->
	<script src="${pageContext.request.contextPath}/resources/vendor/countdowntime/countdowntime.js"></script>
<!--===============================================================================================-->
	<script src="${pageContext.request.contextPath}/resources/js/main.js"></script>

</form>
</c:if>

<c:if test="${msg == false}">
   <p style="color:#f00;">로그인에 실패했습니다. 아이디 또는 패스워드를 다시 입력해주십시오.</p>
</c:if>

<c:if test="${user != null}">
   <p>${user.username}님 환영합니다.</p>
   
   <!-- <a href="member/modify">회원정보 수정</a>, <a href="member/withdrawal">회원탈퇴</a><br/> -->
   <a href="<%=path%>/restful/board">게시판 리스트</a><br>
   <a href="<%=path%>/logout">로그아웃</a>
   
      
   
</c:if>



</body>
</html>




=============================================================kakaoboard.jsp=========================================================================

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    <%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ page session="false" %>
<!DOCTYPE html>
<html>
<head>
	<title>Home</title>
</head>
<body>
	<%
		String path = request.getContextPath();
	%>
	
	
	<%-- id, nickname, email 모두 컨트롤러에서  model.addAttribute로 받아왔다. --%>
	<h2>카톡 로그인 성공했습니다.</h2>
	 <p>id : ${id}</p>
	<p>닉네임 : ${nickname}</p>
	<p>이메일 : ${email}</p>
	<a href="<%=path%>/restful/board">게시판 리스트</a><br>
	<a href="<%=path%>/logout">로그아웃</a>

</body>
</html>

