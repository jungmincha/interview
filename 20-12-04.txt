1.아래의 접근제한자에 대하여 설명하시오.
 
 인스턴스 멤버 대상 접근 수준으로 나눈다면
 
-private : 클래스 내부만 (인스턴스 변수 앞에서는 private 을 써주어야 한다. 외부로 부터 입력 받는 잘못된 값에 컴파일 되지 않으려면) 히든 인포메이션
-default : 클래스 내부와 동일 패키지만 
-protected : 클래스 내부와 동일 패키지와 상속받은 지역만
-public : 전부

각가의 접근 제한자는 변수 메소드 클래스의 접근 권한을 제한하기 위해서 사용된다. 변수 메소드 클래스 이름의 맨 앞에 해당 키워드를 붙여 사용한다.(default 는 아무것도 안붙인다.)


2.지역변수에 접근제한자를 붙이지 않는 이유는?

지역변수는 접근 제한자를 붙여도 어차피 범위가 그 블록 안에서만 사용할 수 있도록 작게 한정되어 있기 때문에 접근 제한자의 의미가 없어진다.

3.캡슐화에 대하여 설명하시오. 

캡슐화란 프로그램을 잘 짜는 것이다.

캡슐화의 핵심은 사용자가 함수에 대한 내용을 잘 몰라도 메인에 있는 내용으로 알아보게 만드느 것.

최종 사용자에게 단번에 알아 볼 수 있게 프로그래밍 하는 것이다(프로그램 잘 짜는 것) = 캡슐화




4.랜덤 숫자 맞추기 게임을 짜시오.

===================================================================메인===================================================================================

import java.util.Scanner;

public class Up_Down_project {

	public static void main(String[] args) {

		while (true) {

			int num1;

			UpDown myUP = new UpDown();

			Scanner sc = new Scanner(System.in);

			num1 = sc.nextInt();

			myUP.setNum1(num1);

			myUP.show();

		}

	}
}

=================================================================클래스=====================================================================================

public class UpDown {

	private int num1;
	private static int count = 0;
	private int com = 50 ; 
			//(int) (Math.random() * 100) + 1;

	UpDown() {
		getCount();
	}

	void getCount() {

		count++;                                     //문제가 있다. 랜덤을 넣어줄 때 랜덤값이 고정되지 않고 계속 변화하여 제대로된 값을 구할 수 없다. 수정 

	}

	public int getNum1() {

		return num1;
	}

	public void setNum1(int num1) {

		this.num1 = num1;

	}
	
	public void show() {

		if (com > num1) {
			System.out.println("up");
			
			
		} else if (com < num1) {
			System.out.println("down");
			
		} else {
			System.out.println("답은" + num1 + "입니다");
			System.out.println("축하합니다");
			System.out.println(UpDown.count + "번 만에 성공");

		}

	}
}






5.static 변수의 다른 용어 3가지를 말해 보시오
static이 안붙어 있으면 인스턴스 변수이다.
클래스 변수 (클래스 명으로 접근하기 때문)
정적 변수 ,
공유 변수(한번 static에 올려놓으면 계속 공유하며 쓸수 있다는 의미)

6.자바의 메모리 영역을 3가지로 나누고, 해당 영역에 들어가는 정보를 말하여 보시오.
.class 를 어떻게 자바에서 올리나를 말해주는 것

method area

호출된 클래스의 메모리 생성, 그 안에 데이터 멤버 중 static 변수의 정보를 먼저 올린다(붕어빵 틀을 올림)

call stack

메인함수 안에 생성되는 객체(메모리 주소)와 호출되는 함수들

순차적으로 생성 되었다가 사용이 끝나면 끝나는 순서로 삭제 됨 (생성된 순서와 반대 순서)

heap

객체의 인스턴스 변수와 메소드 정보, static 변수를 포함하고 있는 클래스의 주소 정보가 들어있다.
(동일한 클래스의 객체이고, static 변수가 있다면 static 변수 정보는 공유 : 같은 주소 공유)


7.static 변수의 접근 방법은? 

인스턴스(객체)명으로 접근 할 수 있다

클래스로 다이렉트로 접근 할 수 있다(이게 더 나은 방법).


class Game(){
static num = 1 ;
}
public static void main(String[] args){

Game myGame = new Game();

//myGame.num(); 인스턴스 변수
//Game.num(); 클래스 변수

}

8.클래스 변수의 활용의 예를 드시오.


값의 공유가 목적이다.





9.스태틱 함수에 인스턴스 변수가 올수 없는 이유는? 인스턴스의 메모리 방은 객체가 생성될 때 생성된다. 하지만 스태틱은 그보다 먼저 메모리방에

올라가기 때문에 둘은 양립할 수 없다. 즉 메모리 생성 시기가 다르기 때문이다.

AAA에 대한 정보를 메인에다가 올린다. AAA에 대한 클래스 정보를 메인에다가 올린다. 붕어빵 틀을 올린다. 그리고 메인에서 스태틱이 있나 체크한다.
스캔이 끝나면 스태틱이 존재하면 메인에 4바이트 방을 만든다. 그리고 콜스텍에 aaa를 주고 힙에 값을 뿌린다.

스태틱 함수에는 스태틱 변수만 사용 할 수 있다. 

그래서 인스턴스 변수, 인스턴스 함수가 올 수 없다. (하지만 인스턴스 변수에서는 스태틱 변수도 올 수 있고 스태틱 함수도 올 수 있다.)

올 수 있는 이유는? 스태틱이 미리 메모리 방을 잡았기 때문에. 생성시기가 더 빠르기 때문에 당연히 올 수 있다. 


class NumberPrinter {
	
	private int myNum = 0 ;
	static void showInt(int n) {
		System.out.println(n); //System 은 클래스다. 
										//static : 단순 기능 제공이 목적인 메소드들. 객체 생성할 필요가 없는 것들에 static을 붙힌다. 
					myNum = 0;											//static 안하면 계속 메모리를 생성해야 한다(예를 들어 new 선언 해서 메모리에 올리는 것)
																		//인스턴스 변수와는 관련이 없다. static 함수 안에 인스턴스 변수가 올 수 없다.
	}
	static void showDouble(double n) {
		System.out.println(n);
	}
	void setMyNumber(int n) {
		myNum = n ;
	}
	void showMyNumber() {
		showInt(myNum);
	}
}

	class ClassMethod {

	public static void main(String[] args) {
		 NumberPrinter.showInt(20);
		 NumberPrinter np = new  NumberPrinter();
		 
		 np.showDouble(3.15);
		 np.setMyNumber(75);
		 np.showMyNumber();
	}

}

static 내의 

class내의 

지역 변수는 얼마든지 올 수 있다.

class 밖의
인스턴스 변수는 못온다.
static 안에 못온다.


10.아래의 프로그램을 작성 하시오.

다음 멤버를 가지고 직사각형을 표현하는 Rectangle 클래스를 작성하라.

- int 타입의 x, y, width, height 필드: 사각형을 구성하는 점과 크기 정보
- x, y, width, height 값을 매개변수로 받아 필드를 초기화하는 생성자
- int square() : 사각형 넓이 리턴
- void show() : 사각형의 좌표와 넓이를 화면에 출력
- boolean contatins(Rectangle r) : 매개변수로 받은 r이 현 사각형 안에 있으면 true 리턴
- main() 메소드의 코드와 실행 결과는 다음과 같다
public static void main(String[] args) {
   Rectangle r = new Rectangle(2, 2, 8, 7);
   Rectangle s = new Rectangle(5, 5, 6, 6);
   Rectangle t = new Rectangle(1, 1, 10, 10);
   
   r.show();
   System.out.println("s의 면적은 "+s.square());
   if(t.contains(r)) System.out.println("t는 r을 포함합니다.");
   if(t.contains(s)) System.out.println("t는 s를 포함합니다.");
}
(2,2)에서 크기가 8x7인 사각형
s의 면적은 36
t는 r을 포함합니다.


public class Rectangle {
	
	private int x, x2;
	private int y, y2;
	private int width;
	private int height;

	public Rectangle(int x, int y, int width, int height) {
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;

	}

	public int square() {

		return width * height;

	}

	public void show() {

		System.out.println("(" + x + "," + y + ") 에서 크기가" + width + "x" + height + "인 사각형");

	}

	public boolean contains(Rectangle compare) {
		this.x2 = x2 + width;
		this.y2 = y2 + height;

		if ((this.x < compare.x) && (this.y2 > compare.y2) && (this.x2 > compare.x2)) {

			return true;

		} else {

			return false;
		}

	}
}

