1.String 클래스 에서 문자열 비교시 equal을 쓰는 이유는?
 
 같은 기능을 하는 연산자 "==" 는 주소값이 다르면 값이 같아도 다르다고 표시를 해준다.
 
  
 문자열의 내용비교를 하도록 Object class의 equals() 함수를 오버라이딩 하고 있다. 
 
 
  
 
 
 
 
 
2.shall copy, deep copy 의 차이는?

shall copy는 얕은 복사이다. 주소값을 복사해주기 때문에 결과 값도 똑같이 복사되어 출력된다. 


									     	      



deep copy는 깊은 복사이다. 기존의 것을 복사해서 새로 객체를 생성하기 때문에 결과 값은 예전과 같은 값으로 출력된다.






3.금일 배운 Rectangle의 shall copy 와 deep copy 일때의 그림을 그리시오.(중요)



4.다음 main()이 실행되면 아래 예시와 같이 출력되도록 MyPoint 클래스를 작성하라.

public static void main(String [] args) {
	MyPoint p = new MyPoint(3, 50);
	MyPoint q = new MyPoint(4, 50);
	System.out.println(p);
	if(p.equals(q)) System.out.println("같은 점");
	else System.out.println("다른 점");			
}

Point(3,50)
다른점



public class MyPoint {

	private int num1;
	private int num2;

	MyPoint(int num1, int num2) {
		this.num1 = num1;
		this.num2 = num2;

	}

	public String toString() {

		return "point(" + num1 + "." + num2 + ")";

	}
	
	
	
	

	public static void main(String[] args) {
		MyPoint p = new MyPoint(3, 50);
		MyPoint q = new MyPoint(4, 50);
		System.out.println(p);
		if (p.equals(q))
			System.out.println("같은 점");
		else
			System.out.println("다른 점");
	}

}








5.중심을 나타내는 정수 x, y와 반지름 radius 필드를 가지는 Circle 클래스를 작성하고자 한다. 생성자는 3개의 인자(x, y, raidus)를 받아 해당 필드를 초기화하고, 
equals() 메소드는 두 개의 Circle 객체의 중심이 같으면 같은 것으로 판별하도록 한다.

public static void main(String[] args) {
	Circle a = new Circle(2, 3, 5); // 중심 (2, 3)에 반지름 5인 원
	Circle b = new Circle(2, 3, 30); // 중심 (2, 3)에 반지름 30인 원
	System.out.println("원 a : " + a);
	System.out.println("원 b : " + b);
	if(a.equals(b))
		System.out.println("같은 원");
	else 
		System.out.println("서로 다른 원");
}

원 a : Circle(2,3)반지름5
원 b : Circle(2,3)반지름30
같은 원



public class Circle {
	
	int x = 0;
	int y = 0;
	int radius = 0;

	Circle(int x, int y, int radius) {

		this.x = x;
		this.y = y;
		this.radius = radius;

	}

	public String toString() {

		return "Circle(" + x + "," + y + ")반지름" + radius;

	}

	public boolean equals(Object obj) {

		if (this.x == ((Circle) obj).x && this.y == ((Circle) obj).y)

			return true; // "Circle(" + x + "," + y + ")반지름" + radius ;

		else
			return false;

	}

	public static void main(String[] args) {

		Circle a = new Circle(2, 3, 5); // 중심 (2, 3)에 반지름 5인 원
		Circle b = new Circle(2, 3, 30); // 중심 (2, 3)에 반지름 30인 원
		System.out.println("원 a : " + a);
		System.out.println("원 b : " + b);
		if (a.equals(b))
			System.out.println("같은 원");
		else
			System.out.println("서로 다른 원");
	}

}






6.문자열을 입력받아 한 글자씩 회전시켜 모두 출력하는 프로그램을 작성하라.(클래스로 작성할 필요없이 메인에서 직접 할것)

문자열을 입력하세요. 빈칸이나 있어도 되고 영어 한글 모두 됩니다.
I Love you
 Love youI
Love youI 
ove youI L
ve youI Lo
e youI Lov
 youI Love
youI Love 
ouI Love y
uI Love yo
I Love you
[Hint] Scanner.nextLine()을 이용하면 빈칸을 포함하여 한 번에 한 줄을 읽을 수 있다.


public class GamaMain {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

			Scanner sc = new Scanner(System.in);
			
			System.out.println("문자열을 입력하세요.");
			String str = sc.nextLine();
			
			for(int i = 1 ; i <= str.length() ; i ++) {
				
				System.out.println(str.substring(i));
				System.out.println(str.substring(0 , i));
				
			}
			
	}

}




7.래퍼 클래스란 무엇인가?

기본 자료형의 값을 감싸는 클래스이다.


8.auto unboxing 이란?

박싱(물건을 집어넣음):  객체화 시켜 클래스로 감싼다. 기본형 →  객체형

              객체 생성을 통해 이루어짐

언박싱(물건을 꺼냄): 값을 꺼내는 작업을 하는 것을 언박싱 이라고 표현한다. 객체형 → 기본형

                 메소드 호출을 통해 이루어짐



9. 다음 조건을 만족하는 클래스 Person을 구현하여 테스트하는 프로그램을 작성하시오.(필수)

- 클래스 Person은 이름을 저장하는 필드 구성

- 클래스 Person은 상위 클래스 Object의 메소드 equals()를 오버라이딩하여 이름이 같으면 true를 반환하는 메소드 구현

- 다음과 같은 소스로 클래스 Person을 점검

Person p1 = new Person("홍길동");
System.out.println(p1.equals(new Person("홍길동")));
System.out.println(p1.equals(new Person("최명태")));

===============================================================클래스=============================================================================
public class Person { // 현재 지금 Object를 상속 받는 상태이다.

	private String name;

	public Person(String name) {
		this.name = name;
	}

	public boolean equals(Object obj) {  // 모든 클래스는 Object를 상속 받는다. Object 클래스로부터 equals 메서드를 오버라이딩 해주었다.  

		if (this.name == ((Person) obj).name) {
			return true;
		} else {
			return false;
		}

	}


 결과값 : true
 	 false




10. 다음 조건을 만족하는 클래스 String의 객체 이용 프로그램을 작성하여 메소드 equals()와 연산자 ==의 차이를 비교 설명하시오.(필수) 

- 메소드 equals()와 비교 연산자 ==의 차이를 다음 소스로 점검

String s1 = new String("java");
String s2 = new String("java");
String s3 = s2;


System.out.println(s1 == s2);
System.out.println(s1.equals(s2));
System.out.println(s2 == s3);
System.out.println(s2.equals(s3));


결과 값 false
  	true
	true
	true

비교 연산자인 경우는 주소값이 같냐 다르냐에 따라서 참거짓이 나뉜다. 소스코드 내 비교대상인 두개의 문자열은 "java"로 글자는 같지만
주소값이 다르기 때문에 다르다는 결과가 도출된다.

반면 equals 는 String 클래스의 메서드이다. 인스턴스 안에 있는 내용 비교를 하는 형태로 equals 메소드를 오버라이딩 하고 있다. 그래서 주소값에 상관 없이 내용만 같으면 
같다는 결과가 도출된다.



11. 다음 조건을 만족하도록 오늘의 정보를 출력하는 프로그램을 작성하시오.

- 클래스 Calendar의 객체의 다음 메소드를 사용하며

 * get(Calendar.DAY_OF_WEEK_IN_MONTH) : 달에서 요일의 횟수 반환
 * get(Calendar.DAY_OF_WEEK) : 요일을 반환, 1이 일요일
 * get(Calendar.WEEK_OF_MONTH) : 월의 주 횟수를 반환
 * get(Calendar.DAY_OF_YEAR) : 해의 날짜를 반환
 * get(Calendar.WEEK_OF_YEAR) : 해의 주 횟수를 반환

- 다음과 같이 출력되도록 한다.

오늘은 2012년 6월 17일 일요일입니다.
이 달의 3번째 일요일입니다.
이 달의 4번째 주입니다.
이 해의 169일입니다.
이 해의 25번째 주입니다. 


오늘의 요일 구하는 배열 함수

public class Calend {

	public static void main(String[] args) {

		String[] week = { "일", "월", "화", "수", "목", "금", "토" };
		String day = null;
		Calendar cal = Calendar.getInstance();

		int dayOfWeek = cal.get(Calendar.DAY_OF_WEEK);

		for (int i = 0; i < week.length; i++) {
			if (dayOfWeek == i) {
				day = week[i - 1]; //배열 길이의 시작이 0부터 시작한다. dayofweek의 값을 받은 i는 1부터 일요일로 받기 때문에 -1 을 넣어준다.
			}
		}

		System.out.println(day + "요일입니다.");

	}

}





