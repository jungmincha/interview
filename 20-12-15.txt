1.Maker 인터페이스에 대하여 설명하시오.
 
클래스를 분류할 때 사용한다.
 
 마커 인터페이스의 역할은? 마킹을 하면서 종류를 나누는 역할

upper Lower 로 클래스의 종류를 나누어서 군집을 나눔
 
 
2.추상클래스에 대하여 설명하시오.

추상메서드를 가지고 있는 것이 추상클래스이다.
(body)가 없다는 뜻이다. 일반 메서드 함수 선언 가능



3.추상클래스와 인터페이스의 차이는

추상클래스는 extends로 상속
다중상속 불가, 추상 메소드외에 인스턴스 변수와 인스턴스 함수도 올 수 있다.
4바이트 메모리 잡는 것은 가능
객체 생성 불가

인터페이스는 implements로 구현



4.에러와 예외의 차이는? 

에러는 시스템에 비정상적인 상황이 생겼을 때 발생한다.(코딩상의 에러x) 

예를들면 메모리가 꽉차거나 하드가 잘못되었을때(os가 담당하므로 

자바가 어떻게 해 줄 수 없다.)


예외는 개발자의 로직에서 발생한 오류 실행중간에 발생하는 "정상적이지 않은 상황"이다.

예외 처리는 JVM이 해준다. 에러에 대한 객체를 표시를 해주며 프로그램이 죽는다.

try catch 하는 이유 = 안죽을라고...jvm으로 하여금 예외처리 된다.

죽이지 말고 해당 에러에 대한 객체를 내 입력 어플리케이션으로 넘겨라 라는 뜻이다.

jvm에서 catch로 에러를 받는다. 에러가 생길만한 곳에다가 try를 묶는다. 객체가 에러가

 생기게 되면 catch에다가 에러가 생길만한 구문을 넣어준다. 그러면 jvm이 절대 죽이지 못한다




5.unchecked 와 cheked 예외의 차이는?
6.예외처리 UML를 그리시오.


7.사칙연산 계산기를 아래의 조건으로 짜시오.
-interface 를 활용할것
-예외처리 메커니즘을 적용할것.


=======================================================================메인===============================================================================================
public class MainCalcul {

public static void main(String [] args) {
		
		Calculator myCal = new Calcul1();//다형성 적용 
									  //
		 ((Calcul1) myCal).output(); //아들 클래스인 Calcul1로 형변환해줌
		
		
		
	}
}
=====================================================================클래스================================================================================================

import java.util.Scanner;

/*7.사칙연산 계산기를 아래의 조건으로 짜시오.
-interface 를 활용할것
-예외처리 메커니즘을 적용할것.

 */

interface Calculator { //인터페이스, 함수에 중가로가 없다..

	public void plus();

	public void minors();

	public void mul();

	public void divid();

}

class Calcul1 implements Calculator { //인터페이스를 상속받는 아들클래스

	Scanner sc = new Scanner(System.in);

	private int x = sc.nextInt();
	private char ch = sc.next().charAt(0);
	private int y = sc.nextInt();

	public void plus() {

		System.out.println(x + " + " + y + " = " + (x + y));

	}

	public void minors() {

		System.out.println(x + " - " + y + " = " + (x - y));
	}

	public void mul() {

		System.out.println(x + " * " + y + " = " + (x * y));
	}

	public void divid() {

		System.out.println(x + " / " + y + " = " + (x / y));
	}

	public void output() {
		try {
			switch (ch) { //계산기

			case '+':
				plus();
				break;
			case '-':
				minors();
				break;
			case '*':
				mul();
				break;
			case '/':
				divid();
				break;
			}
		} catch (Exception e) {
			//예외 처리
			//e.printStackTrace();

		}
		system.out.println("오류가 났습니다.")
	}

}



8.다음 Stack 인터페이스를 상속받아 실수를 저장하는 StringStack 클래스를 구현하라.(구현할수 있도록 할것) 직접 짜야한다.

//스택은 밑이 안뚫린 양동이 , 배열을 이용, 스택정도는 외워라

interface Stack {
   int length(); // 현재 스택에 저장된 개수 리턴
   int capacity(); // 스택의 전체 저장 가능한 개수 리턴
   String pop(); // 스택의 톱(top)에 실수 저장
   boolean push(String val); // 스택의 톱(top)에 저장된 실수 리턴
}
그리고 다음 실행 사례와 같이 작동하도록 StackApp 클래스에 main() 메소드를 작성하라.

총 스택 저장 공간의 크기 입력 >> 3
문자열 입력 >> hello
문자열 입력 >> sunny
문자열 입력 >> smile
문자열 입력 >> happy
스택이 꽉 차서 푸시 불가!
문자열 입력 >> 그만
스택에 저장된 모든 문자열 팝 : smile sunny hello 

==================================================================클래스==================================================================================

import java.util.Scanner;

interface Stack {

	int length(); // 현재 스택에 저장된 개수 리턴

	int capacity(); // 스택의 전체 저장 가능한 개수 리턴

	String pop(); // 스택의 톱(top)에 실수 저장

	boolean push(String val); // 스택의 톱(top)에 저장된 실수 리턴

}

class StringStack implements Stack { //Stack의 상속 받는 클래스

	private String stack[]; //문자열 배열
	private int top;

	StringStack(int length) {//StringStack의 생성자 초기화

		stack = new String[length];
		top = -1; //스택이 텅 비어있다는 것을 나타내주었다.

	}

	@Override
	public int length() {//Stack 인터페이스 내의 함수들을 오버라이딩 해줬다.

		return stack.length;
	}

	@Override
	public int capacity() {

		return 0;
	}

	@Override
	public String pop() {

		if (top == -1)
			return "스택이 비어있습니다";

		return stack[top--];

	}

	@Override
	public boolean push(String val) {

		if (top == stack.length-1)//top이 -1로 시작했기 때문에!
			return false;

		stack[++top] = val;
		

		return true;

	}

}
====================================================================================================================================================
public class StackApp {

	public static void main(String[] args) {

		Scanner sc = new Scanner(System.in);
		System.out.println("홈 스택 저장 공간의 크기 입력");
		int num = sc.nextInt();
		StringStack Stack = new StringStack(num);

		while (true) {
			System.out.println("문자열 입력 >>");
			String word = sc.next();

			if (word.equals("그만")) {
				break;
			}
			if (!Stack.push(word)) {
				System.out.println("스택이 꽉차서 푸시 불가");
				break;
			}
		}

		System.out.println("스택에 저장된 모든 문자열 팝 : ");
		int len = Stack.length();
		for (int i = 0; i < len; i++) {
			String s = Stack.pop();
			System.out.print(s + " ");
		}
		sc.close();

	}

}











9.
철수 학생은 다음 3개의 필드와 메소드를 가진 4개의 클래스 Add, Sub, Mul, Div를 작성하려고 한다

- int 타입의 a, b 필드: 2개의 피연산자
- void setValue(int a, int b): 피연산자 값을 객체 내에 저장한다.
- int calculate(): 클래스의 목적에 맞는 연산을 실행하고 결과를 리턴한다.
곰곰 생각해보니, Add, Sub, Mul, Div 클래스에 공통된 필드와 메소드가 존재하므로 새로운 추상 클래스 Calc를 작성하고 Calc를 상속받아 만들면 되겠다고 생각했다.
그리고 main() 메소드에서 다음 실행 사례와 같이 2개의 정수와 연산자를 입력받은 후, Add, Sub, Mul, Div 중에서 이 연산을 처리할 수 있는 객체를 생성하고 
setValue() 와 calculate()를 호출하여 그 결과 값을 화면에 출력하면 된다고 생각하였다. 철수처럼 프로그램을 작성하라.





두 정수와 연산자를 입력하시오 >> 5 7 +
12
==================================================================클래스==================================================================================
import java.util.Scanner;

abstract class Calc {
	
	protected int num1;
	protected int num2;

	public void setValue(int num1, int num2) {
		this.num1 = num1;
		this.num2 = num2;

	}

	abstract int calculate();
}

class Add extends Calc{

	@Override
	public int calculate() {//오버라이딩 num1 / num2를 가지고 있는 상태
		
		return num1 + num2;
	}

 }

class Sub extends Calc{

	@Override
	public int calculate() {//오버라이딩 num1 / num2를 가지고 있는 상태
		
		return num1 - num2;
	}

 }
class Mul extends Calc{

	@Override
	public int calculate() {//오버라이딩 num1 / num2를 가지고 있는 상태
		
		return num1 * num2;
	}

 }

class Div extends Calc{

	@Override
	public int calculate() {//오버라이딩 num1 / num2를 가지고 있는 상태
		
		return num1 / num2;
	}

 }


=================================================================메인===================================================================================

public class CalMain {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int result = 0 ;
		System.out.print("두 정수를 입력하세요.");
		
		try { //예외처리 해주는 센스!
			
		
		int num1 = sc.nextInt();
		int num2 = sc.nextInt();
		char op = sc.next().charAt(0);
		
		Calc cal = null;
		
		switch(op) {

		case '+' :
			cal = new Add();
			break;
		case '-' :
			cal = new Sub();
			break;
		case '*' :
			cal = new Mul();
			break;
		case '/' :
			cal = new Div();
			break;
			
			default:
				System.out.println("잘못된 연산입니다.");
		}
		
		cal.setValue(num1, num2);
		
		System.out.println(cal.calculate());
		
		}catch(Exception e) {
			System.out.println("비정상 종료입니다.");
			e.printStackTrace();
		}
		
		
		sc.close();
		
		
		
		
		
		

	}

}









13.연습문제 7-22 번을 푸시오.

class CircleCircle extends Shape {

	double r = 0;

	CircleCircle(double r) {

		this.r = r;

	}

	double calcArea() {
		return r * r * 3.14;
	}

}

class Rectangle extends Shape {

	double width = 0;
	double height = 0;

	Rectangle(double width, double height) {
		this.width = width;
		this.height = height;
	}

	double calcArea() {
		return width * height;
	}

	void isSquare() {

		if (width == height) {
			System.out.println("정사각형입니다.");
		} else {
			System.out.println("정사각형이 아닙니다.");
		}

	}
}



14.연습문제 7-23 번을 푸시오.
